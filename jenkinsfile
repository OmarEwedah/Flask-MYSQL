node {

	def repos = []

	def oauth2 = [: ]

	oauth2."serviceName" = "oauth2-server"
	oauth2."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-oauth2-server.git"
	oauth2."devNode" = "DevNode"
	oauth2."testingNode" = "TestingEndPoint"
	oauth2."stagingNode" = "StagingEndPoint"
	oauth2."numberOfInstances" = 1
	oauth2."exposePort" = 8985

	repos << oauth2

	def channel = [: ]

	channel."serviceName" = "channel-service"
	channel."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-channel.git"
	channel."devNode" = "DevNode"
	channel."testingNode" = "TestingEndPoint"
	channel."stagingNode" = "StagingEndPoint"
	channel."numberOfInstances" = 1
	channel."exposePort" = 8087

	repos << channel

	def user_channel = [: ]

	user_channel."serviceName" = "user_channel"
	user_channel."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-user-channel.git"
	user_channel."devNode" = "DevNode"
	user_channel."testingNode" = "TestingEndPoint"
	user_channel."stagingNode" = "StagingEndPoint"
	user_channel."numberOfInstances" = 1
	user_channel."exposePort" = 8088

	repos << user_channel

	def user_flow = [: ]

	user_flow."serviceName" = "user_flow"
	user_flow."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-user-flow.git"
	user_flow."devNode" = "DevNode"
	user_flow."testingNode" = "TestingEndPoint"
	user_flow."stagingNode" = "StagingEndPoint"
	user_flow."numberOfInstances" = 1
	user_flow."exposePort" = 8089

	repos << user_flow

	def user = [: ]

	user."serviceName" = "user"
	user."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-user.git"
	user."devNode" = "DevNode"
	user."testingNode" = "TestingEndPoint"
	user."stagingNode" = "StagingEndPoint"
	user."numberOfInstances" = 1
	user."exposePort" = 8084

	repos << user

	def mail = [: ]

	mail."serviceName" = "mail"
	mail."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-mail.git"
	mail."devNode" = "DevNode"
	mail."testingNode" = "TestingEndPoint"
	mail."stagingNode" = "StagingEndPoint"
	mail."numberOfInstances" = 1
	mail."exposePort" = 8086

	repos << mail

	def exchange_consumer = [: ]

	exchange_consumer."serviceName" = "exchange_consumer"
	exchange_consumer."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-exchange-consumer.git"
	exchange_consumer."devNode" = "DevNode"
	exchange_consumer."testingNode" = "TestingConsumer2"
	exchange_consumer."stagingNode" = "StagingConsumer2"
	exchange_consumer."numberOfInstances" = 5
	exchange_consumer."exposePort" = null

	repos << exchange_consumer

	def exchange_connector_endpt = [: ]

	exchange_connector_endpt."serviceName" = "exchange_connector_endpt"
	exchange_connector_endpt."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-exchange-connector-endpt.git"
	exchange_connector_endpt."devNode" = "DevNode"
	exchange_connector_endpt."testingNode" = "TestingConsumer2"
	exchange_connector_endpt."stagingNode" = "StagingConsumer2"
	exchange_connector_endpt."numberOfInstances" = 1
	exchange_connector_endpt."exposePort" = 8083

	repos << exchange_connector_endpt

	def plazza_consumer = [: ]

	plazza_consumer."serviceName" = "plazza_consumer"
	plazza_consumer."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-plazza-consumer.git"
	plazza_consumer."devNode" = "DevNode"
	plazza_consumer."testingNode" = "TestingConsumer1"
	plazza_consumer."stagingNode" = "StagingConsumer1"
	plazza_consumer."numberOfInstances" = 5
	plazza_consumer."exposePort" = null

	repos << plazza_consumer

	def plazza_connector_endpt = [: ]

	plazza_connector_endpt."serviceName" = "plazza_connector_endpt"
	plazza_connector_endpt."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-plazza-connector-endpt.git"
	plazza_connector_endpt."devNode" = "DevNode"
	plazza_connector_endpt."testingNode" = "TestingConsumer2"
	plazza_connector_endpt."stagingNode" = "StagingConsumer2"
	plazza_connector_endpt."numberOfInstances" = 1
	plazza_connector_endpt."exposePort" = 8082


	repos << plazza_connector_endpt

	def twitter_consumer = [: ]

	twitter_consumer."serviceName" = "twitter_consumer"
	twitter_consumer."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-twitter-consumer.git"
	twitter_consumer."devNode" = "DevNode"
	twitter_consumer."testingNode" = "TestingConsumer1"
	twitter_consumer."stagingNode" = "StagingConsumer1"
	twitter_consumer."numberOfInstances" = 5
	twitter_consumer."exposePort" = null

	repos << twitter_consumer

	def twitter_connector_endpt = [: ]

	twitter_connector_endpt."serviceName" = "twitter_connector_endpt"
	twitter_connector_endpt."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-twitter-connector-endpt.git"
	twitter_connector_endpt."devNode" = "DevNode"
	twitter_connector_endpt."testingNode" = "TestingConsumer2"
	twitter_connector_endpt."stagingNode" = "StagingConsumer2"
	twitter_connector_endpt."numberOfInstances" = 1
	twitter_connector_endpt."exposePort" = 8081

	repos << twitter_connector_endpt

	def aggregator_consumer = [: ]

	aggregator_consumer."serviceName" = "aggregator_consumer"
	aggregator_consumer."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-aggregator-consumer.git"
	aggregator_consumer."devNode" = "DevNode"
	aggregator_consumer."testingNode" = "TestingConsumer1"
	aggregator_consumer."stagingNode" = "StagingConsumer1"
	aggregator_consumer."numberOfInstances" = 2
	aggregator_consumer."exposePort" = null

	repos << aggregator_consumer

	def push_notification_service_consumer = [: ]

	push_notification_service_consumer."serviceName" = "push_notification_service_consumer"
	push_notification_service_consumer."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-push-notification-service.git"
	push_notification_service_consumer."devNode" = "DevNode"
	push_notification_service_consumer."testingNode" = "TestingConsumer1"
	push_notification_service_consumer."stagingNode" = "StagingConsumer1"
	push_notification_service_consumer."numberOfInstances" = 2
	push_notification_service_consumer."exposePort" = null

	repos << push_notification_service_consumer

	def feeds = [: ]

	feeds."serviceName" = "feeds"
	feeds."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-feeds.git"
	feeds."devNode" = "DevNode"
	feeds."testingNode" = "TestingEndPoint"
	feeds."stagingNode" = "StagingEndPoint"
	feeds."numberOfInstances" = 1
	feeds."exposePort" = 8085

	repos << feeds

	def ingestor = [: ]

	ingestor."serviceName" = "ingestor"
	ingestor."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-ingestor.git"
	ingestor."devNode" = "DevNode"
	ingestor."testingNode" = "TestingConsumer2"
	ingestor."stagingNode" = "StagingConsumer2"
	ingestor."numberOfInstances" = 2
	ingestor."exposePort" = null

	repos << ingestor

	def comparator = [: ]

	comparator."serviceName" = "comparator"
	comparator."gitRepo" = "https://www.forge.orange-labs.fr/plugins/git/hubme/hubme-backend-comparator.git"
	comparator."devNode" = "DevNode"
	comparator."testingNode" = "TestingConsumer2"
	comparator."stagingNode" = "StagingConsumer2"
	comparator."numberOfInstances" = 2
	comparator."exposePort" = null

	repos << comparator

	def servicesNames = ""
	for (repo in repos) {
		servicesNames = servicesNames + repo["serviceName"] + '\n'
	}

	def userInput = input(
		id: 'userInput', message: 'select service and branch ?', parameters: [
			[$class: 'ChoiceParameterDefinition', name: 'micro-service', choices: servicesNames],
			[$class: 'ChoiceParameterDefinition', name: 'branch', choices: "develop\nmaster"]
		]
	)

	def repo
	for (repository in repos) {
		if (repository["serviceName"] == userInput["micro-service"]) {
			repo = repository
		}
	}

	def commit_id
	dir(userInput["micro-service"]) {

		/*stage('Checkout') {
			git url: repo["gitRepo"], branch: userInput["branch"], credentialsId: 'OrangeForge'
			sh "git rev-parse --short HEAD > .git/commit-id"
			commit_id = readFile('.git/commit-id').trim()
			repo.		"commitId" = commit_id

		}*/

		/*
		stage('Code analysis') {
			// Provide SonarQube information to connect to
			withSonarQubeEnv('Sonar-FaaS') {
				withMaven(globalMavenSettingsConfig: 'org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig-faas', maven: 'Apache Maven 3.2.5') {
					//sh "JAVA_HOME=${ tool 'Oracle JDK 8u112' } mvn clean package"
					sh "JAVA_HOME=${ tool 'Oracle JDK 8u112' } mvn clean install ${SONAR_MAVEN_GOAL}"
					//getSonarAnalysis coverage:"0", sonarUrl: 'http://52.14.201.16:9000' , projectName: repo["sonarDashboard"], majorIssuesCount: "100", minorIssuesCount: "100", blockerIssuesCount: "100", criticalIssuesCount: "100", infoIssuesCount: "100"

				}
			}
		}
		*/
	}

	def serviceVersion
	def serviceArtifactid
	def devInfra = "10.236.245.245"
	def testingInfra = "10.100.0.21"
	def stagingInfra = "10.236.246.198"
	def testingEndPoint = "10.236.245.254"
	def devEndPoint = "10.236.245.24"

	def exchangeHost = "exchange-lil.corporateint.adrootint.infraint.ftgroupint:10.195.216.215"

	node('Docker') {
		stage('Checkout') {
			git url: repo["gitRepo"], branch: userInput["branch"], credentialsId: 'OrangeForge' //param
			sh "git rev-parse --short HEAD > .git/commit-id"
			commit_id = readFile('.git/commit-id').trim()
			repo.		"commitId" = commit_id
		}
		stage('docker build') {
			sh "mvn clean install -Dmaven.test.skip=true dockerfile:build"
			sh "mvn -Ddocker.repo.url=localhost:5000 dockerfile:push"
			serviceVersion = sh(script: "mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -v '\\['", returnStdout: true).trim()
			serviceArtifactid = sh(script: "mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.artifactId | grep -v '\\['", returnStdout: true).trim()

		}
	}

	def imageName = "10.226.225.240:5000/hubme/" + serviceArtifactid + ":" + serviceVersion

	def exposePortOption = ""
	if(repo["exposePort"] != null){
		exposePortOption = "-p " + repo["exposePort"] + ":" + repo["exposePort"]
	}

	if (userInput["branch"] == "develop") {
		node(repo["testingNode"]) {
			stage('Deploy') {
				//sh "docker stop ${serviceArtifactid} || true"
				sh "docker stop \$(docker ps -a -q --filter ancestor=${imageName} --format=\"{{.ID}}\") || true"
				sh "docker pull ${imageName}"
				for(i = 1; i <= repo["numberOfInstances"]; i++){
					sh "docker run -d ${exposePortOption} --rm --name ${serviceArtifactid}${i} --add-host ${exchangeHost} -e \"MIN_HEAP_SIZE=-Xms2048m\" -e \"MAX_HEAP_SIZE=-Xmx2048m\" -e ACTIVE_PROFILE=testing -e INFRA_HOST=${testingInfra} -e OAUTH_HOST=${testingEndPoint} -e OAUTH_PORT=80 ${imageName}"
				}
			}
		}
		/*node(repo["devNode"]) {
			stage('Deploy') {
				sh "docker pull ${imageName}"
				sh "docker stop ${serviceArtifactid} || true"
				sh "docker run -d ${exposePortOption} --rm --name ${serviceArtifactid} --add-host ${exchangeHost} -e ACTIVE_PROFILE=dev -e INFRA_HOST=${devInfra} -e OAUTH_HOST=${devEndPoint} -e OAUTH_PORT=80 ${imageName}"
			}
		}*/
	}
}
